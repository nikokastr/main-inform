#2

print('x y z w') - выводит данные на печать

for i in range(1, 100, 10): - цикл с параметрами (от, до, шаг)

if (not(y<=x) or (z<=w) or not(z))==False: # if - постановка условия; not - инверсия, or - или, <= - импликация, == - равенство

elif y = 10000:

else:

#5

num=(bin(i)[2:])- задаётся значение переменной, с пепероводом числа в двоичную СС и срезом лишних символов

num.count('1')%2==0 - подсчёт определённых символов в строке, с проверкой остатка на равенство нулю

int(chislo,2) - перевод числа из указанной СС в десятичную

break - прерывание цикла

chislo=10+num[2:]+'0'

#6 from turtle import * - импотируется всё из указанной библиотеки

left(90) - поворот влево на указанный угол

forward(300) - продвижение вперёд на указанное значение

right(120) - поворот вправо на указанный угол

pu() - поднятие пера

for x in range(1,9):
        for y in range(1,10):
goto(x30,y30) - перемещение пера в указанную координату

dot(5) - постановка точки заданной величины

done() - окно остаётся открытым

#8

s=product('12',repeat=5)
print(list(s))
for i in s:
n='16 36 56 76 61..'
if numb.count('6')==1 and numb[0]!='0':
   for/////

s.index('6') - выводит индекс указанного элемента в итерируемом объекте

len(s) - выводит длину итерируемого объекта

t.split(";")- разбивает итерируемый объект по указанному знаку

numb=''.join(n) - соединяет символы или добавляет символ в конец объекта

sp.append(x) - добавляет элемент в конец списка

#9

result = list(map(int, text)) - создаёт список с преобразованием элементов в указанный тип данных

while True: - бесконечный цикл

res6.remove(element) - удаление элемента по значению

sum(res6) - сумма элементов

#12

if all(num%delit!=0 for delit in range(2,num)) - если все условия правда

#14

15**4 - возведение левого числа в степень правого

sum10//14 - целочисленное деление

#15

if all (((x%2==0)<=(x%3!=0))or(x+A>=100)for x in range (1,100)): - ещё пример про условие

#17

with open('17.txt') as f: - импорт элементов из файла

nums[i] - вывод элемента по его индексу

abs() - модуль

#23

from itertools import product - импорт метода из библиотеки

nums=product('12',repeat=i) - генерация объекта

continue - переход к следующшему шагу в for

return count - возвращает значение

pass - заглушка

#24

with open('24.txt') as f:

let=f.readline() - чтение из файла

s.replace('A','G') - один символ в строке заменятся на другую

#25

from operator import itemgetter

sorted(itogo, key=itemgetter(1)) - сортировка по указываемому номеру элемента

#26

s=sorted(s[1:],reverse=True) - сортировка с конца

#27

min_s = min(s,min_s) - выводит минимальное значение

round() - округление

if a==b: - проверка условия а=b
  break - выход из цикла
elif a!=b: - если первое условие не прошло, то...
  print(a)
else: - если все условия не прошли, то...
  print(a,b)
def f(): - функция
  f() - вызов функции
  
any() - возвращает True если любой из элементов True, возвращает False если список/строка пуста или всё False
all() - возвращает True если все элементы True (или пусто), возвращает False если хотя бы одно из значения false/пусто
str() - преобразование к строковому типу
int() - преобразование к целочисленному типу
float() - преобразование к числу с плавающей запятой
list() - преобразование к списку
set() - преобразование к множеству
len() - вычислить длину итерируемого объекта
input(пояснение) - ввод
max() - нахождение максимального значения
min() - нахождение минимального значения
sum() - суммирует все элементы
abs() - модуль числа
sqrt() - квадратный корень из числа
round() - округление float числа
 
 print()- вывод переменной
 print('') - вывод текста
 a=input()- введение числа с клавиатуры
 print(f' ',end=' ') -вывод форматированный в строку
 
while True:   - вечный цикл с выходом по break
    break
    
 for i in range(1,10,3): - перебор (начало, конец, шаг)
  break
 for x in range (5): - двойной перебор  # 00 01 02 03 04 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 40 41 42 43 44 
    for y in range(5):
        print(str(x)+str(y),end=' ')
  
num=(bin(i)[2:])- перевод в 2 СС и срез
num.count('1') -количество входов символа в списке/строке
num.index('6')-индекс элемента в списке/строке
num.append()- добавить значение 
num.sort(reverse=True)-сортировать список по убыванию
int(chislo,2) - перевод в целое из 2 СС
''.join() - объединение всех элементов, в '' знак разделения
l.expand() - добавить к списку элементы другого списка
reversed(l) - инвертирует порядок элеметов списка
sorted(l) - сортирует элементы списка по алфавиту, по возрастанию и т.п.

filter(переменная, условие фильтрации) - фильтрует по определенному значению
map(с чем делаем, что делаем) - преобразование элементов
reduce(функция, последователньость) - преобразование элементов в один

lambda x: int(x) - пример безымянной функции

exit() - завершение программы

s=[]-создание списка
s[0]- доступ к первому элементу списка/строки

l=[x for x in range(10)]- использовани генератора для создания списка
round(i**0.5)- округление

a=12334567
str(a)- перевод в строку
a=a.replace('12','aa')- замена подстроки
b=a.split()-создание списка шинковкой строки по определенному знаку

a=list(map(int,a)) - создание списка целых значений из а

with open('24.txt') as f:- загрузка с тектового файла одной строчки в список
   n=f.readline()
 with open('17.txt') as f: - загрузка с тектового файла в список с преобразованием в числа
   numbers=[int(x) for x in f]
   
def f(n):
   return 2*f(n-2)   - рекурсия
print(f(26))

from turtle import *
left(90)    - поворот налево 90гр
forward(300) - вперед на 300 единиц
right(120)   - поворот направо 120гр
pu()         - поднять перо
goto(x*30,y*30)  - переходить по точкам
dot(5)           - нарисовать точку          
done()           - запустить рисование

from itertools import product
data = list(product((0, 1), (2, 3))) -позволяет получить из введенной последовательности чисел или символов новую совокупность групп во всех возможных вариациях
print(data)
[(0, 2), (0, 3), (1, 2), (1, 3)]
